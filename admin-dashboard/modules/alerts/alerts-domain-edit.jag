<%
var log = new Log();

var getDomain = function (domainName) {
        try {
        var carbon = require('carbon');
        var process = require('process');
        var realmConfiguration = new org.wso2.carbon.user.core.config.RealmConfigXMLProcessor().
                buildRealmConfigurationFromFile();
        var username = "admin";
        var password = "admin";

//        var carbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;        
//        var isEmailLoginEnabled = carbonUtils.getServerConfiguration().getFirstProperty("EnableEmailUserName");
//        var MultitenantConstants = Packages.org.wso2.carbon.utils.multitenancy.MultitenantConstants;
//        if(isEmailLoginEnabled) {
//            username = username + "@" + MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;
//        }

        var stub = new org.wso2.carbon.event.execution.manager.stub.ExecutionManagerAdminServiceStub("https://localhost:9444/services/ExecutionManagerAdminService");
        var client = stub._getServiceClient();
        var options = client.getOptions();
        var authenticator = new org.apache.axis2.transport.http.HttpTransportProperties.Authenticator();
        authenticator.setUsername(username);
        authenticator.setPassword(password);
        authenticator.setPreemptiveAuthentication(true);
        options.setProperty(org.apache.axis2.transport.http.HTTPConstants.AUTHENTICATE, authenticator);
        client.setOptions(options);

        var configInfo = stub.getDomain(domainName);   
        return configInfo;
    } catch (ex) {
        var message = "Error occurred while Enabling/Disabing Analytics (Cause:" + ex.message + ")";
        log.error(message);
        return {
            error: true,
            message: message
        };
    }
};


var saveConfiguration = function (domainName, templateType, configurationName, description, parametersJson) {
        try {

        var valueSeparator = "::";
        
        var TemplateConfigurationDTO = Packages.org.wso2.carbon.event.execution.manager.admin.dto.configuration.xsd.TemplateConfigurationDTO;
        var ParameterDTOE = Packages.org.wso2.carbon.event.execution.manager.admin.dto.configuration.xsd.ParameterDTOE;
        var templateConfigurationDTO = new TemplateConfigurationDTO();

        templateConfigurationDTO.setName(configurationName);
        templateConfigurationDTO.setFrom(domainName);
        templateConfigurationDTO.setDescription(description);
        templateConfigurationDTO.setType(templateType);

        var parameterStrings = parametersJson.split(",");
        var parameters = new Array();

        for (var i in parameterStrings) {
            var parameterDTO = new ParameterDTOE();
            parameterDTO.setName(parameterStrings[0].split(valueSeparator)[0]);
            parameterDTO.setValue(parameterStrings[0].split(valueSeparator)[1]);
            parameters.push(parameterDTO);
        }

        templateConfigurationDTO.setParameterDTOs(parameters);
        
        var carbon = require('carbon');
        var process = require('process');
        var realmConfiguration = new org.wso2.carbon.user.core.config.RealmConfigXMLProcessor().
                buildRealmConfigurationFromFile();
        var username = "admin";
        var password = "admin";

//        var carbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;        
//        var isEmailLoginEnabled = carbonUtils.getServerConfiguration().getFirstProperty("EnableEmailUserName");
//        var MultitenantConstants = Packages.org.wso2.carbon.utils.multitenancy.MultitenantConstants;
//        if(isEmailLoginEnabled) {
//            username = username + "@" + MultitenantConstants.SUPER_TENANT_DOMAIN_NAME;
//        }


        var stub = new org.wso2.carbon.event.execution.manager.stub.ExecutionManagerAdminServiceStub("https://localhost:9444/services/ExecutionManagerAdminService");
        var client = stub._getServiceClient();
        var options = client.getOptions();
        var authenticator = new org.apache.axis2.transport.http.HttpTransportProperties.Authenticator();
        authenticator.setUsername(username);
        authenticator.setPassword(password);
        authenticator.setPreemptiveAuthentication(true);
        options.setProperty(org.apache.axis2.transport.http.HTTPConstants.AUTHENTICATE, authenticator);
        client.setOptions(options);

        var configInfo = stub.saveConfiguration(templateConfigurationDTO);   
        return configInfo;
    } catch (ex) {
        var message = "Error occurred while Saving Domain Configuration (Cause:" + ex.message + ")";
        log.error(message);
        return {
            error: true,
            message: message
        };
    }
};



%>
